generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id                   String                @id @default(cuid())
  name                 String?               @default("")
  email                String                @unique
  password             String?
  emailVerified        DateTime?
  image                String?
  course               String?
  client_description   String?
  LingoletteCredential LingoletteCredential?
  grammatical_gender   String                @default("prefer-not-to-say")
  role                 UserRole              @default(USER)
  accounts             Account[]
  // sessions      Session[]
  // Optional for WebAuthn support
  // Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

// model Session {
//   sessionToken String   @unique
//   userId       String
//   expires      DateTime
//   user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
// model Authenticator {
//   id                   String  @id @default(cuid())
//   credentialID         String  @unique
//   userId               String
//   providerAccountId    String
//   credentialPublicKey  String
//   counter              Int
//   credentialDeviceType String
//   credentialBackedUp   Boolean
//   transports           String?

//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)
// }

// model UserProfile {
//   course               String
//   client_description   String
//   id                   String                @id @db.Uuid
//   LingoletteCredential LingoletteCredential?
//   name                 String                @default("")
//   grammatical_gender   String                @default("prefer-not-to-say")

//   @@map("user_profiles")
// }

model LingoletteCredential {
  targetLng     String
  nativeLng     String
  id            String @db.Uuid
  languageLevel Int
  userProfile   User   @relation(fields: [userid], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userid        String

  @@id([id, userid])
  @@unique([userid])
  @@map("lingolette_credentials")
}
